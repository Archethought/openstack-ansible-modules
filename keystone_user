#!/usr/bin/python
# -*- coding: utf-8 -*-

# Based on Jimmy Tang's implementation

DOCUMENTATION = '''
---
module: keystone_user
short_description: Manage OpenStack users, tenants and roles
requirements: [ python-keystoneclient ]
examples:
   - code: 'keystone_user: user=cinder pass="servicepass" tenant=name:service email="cinder@example.com" role="name:admin"'
author: Lorin Hochstein
'''

try:
    from keystoneclient.v2_0 import client
except ImportError:
    keystoneclient_found = False
else:
    keystoneclient_found = True

# Example openrc auth file
# http://docs.openstack.org/folsom/openstack-compute/install/apt/content/novarc-file.html
# export OS_USERNAME=admin
# export OS_TENANT_NAME=openstackDemo
# export OS_PASSWORD=secretword
# export OS_AUTH_URL=http://192.168.206.130:5000/v2.0/
# export OS_REGION_NAME=RegionOne


def authenticate(endpoint, token, login_user, login_password):
    """Return a keystone client object"""

    if token:
        return client.Client(endpoint=endpoint, token=token)
    else:
        return client.Client(endpoint=endpoint, username=login_user,
                             password=login_password)


'''
tenant user  role   state
------ ----  ----  --------
  X                 present     create_tenant
  X                 absent      remove_tenant
  X     X           present     create_user
  X     X           absent      remove_user

'''


def tenant_exists(keystone, tenant):
    """ Return True if tenant already exists"""
    return tenant in [x.name for x in keystone.tenants.list()]


def user_exists(keystone, user):
    """" Return True if user already exists"""
    return user in [x.name for x in keystone.users.list()]


def get_user_id(keystone, user):
    ks_users = [x for x in keystone.users.list() if x.name == user]
    if len(ks_users) == 0:
        raise KeyError("No keystone users with name %s" % user)
    elif len(ks_users) > 1:
        raise ValueError("%d users with name %s" % (len(ks_users), user))
    else:
        return ks_users[0].id


def get_tenant(keystone, name):
    """ Retrieve a tenant by name"""
    ks_tenants = [x for x in keystone.tenants.list() if x.name == name]
    if len(ks_tenants) == 0:
        raise KeyError("No keystone tenants with name %s" % name)
    elif len(ks_tenants) > 1:
        raise ValueError("%d tenants with name %s" % (len(ks_tenants), name))
    else:
        return ks_tenants[0]


def get_tenant_id(keystone, name):
    return get_tenant(keystone, name).id


def ensure_tenant_exists(keystone, tenant, tenant_description, check_mode):
    """ Ensure that a tenant exists.

        Return (True, id) if a new tenant was created, (False, None) if it
        already existed.
    """

    # Check if tenant already exists
    try:
        tenant = get_tenant(keystone, tenant)
    except KeyError:
        # Tenant doesn't exist yet
        pass
    else:
        if tenant.description == tenant_description:
            return (False, tenant.id)
        else:
            # We need to update the tenant description
            if check_mode:
                return (True, tenant.id)
            else:
                tenant.update(description=tenant_description)
                return (True, tenant.id)

    # We now know we will have to create a new tenant
    if check_mode:
        return (True, get_tenant_id(keystone, tenant))

    ks_tenant = keystone.tenants.create(tenant_name=tenant,
                                        description=tenant_description,
                                        enabled=True)
    return (True, ks_tenant.id)


def ensure_tenant_removed(keystone, tenant, check_mode):
    """ Ensure that a tenant does not exist

         Return True if the tenant was removed, False if it didn't exist
         in the first place
    """
    if not tenant_exists(keystone, tenant):
        return False

    # We now know we will have to delete the tenant
    if check_mode:
        return True


def ensure_user_exists(keystone, user, password, email, tenant, check_mode):
    """ Check if user exists

        Return True if a new user was created, False user alrady existed
    """

    # Check if user alrady exists
    if user_exists(keystone, user):
        return (False, None)

    # We now know we will have to create a new user
    if check_mode:
        return (True, None)

    matched_tenants = [x for x in keystone.tenants.list() if x.name == tenant]
    # If there's more than one tenant with the same name, fail
    if len(matched_tenants) > 1:
        raise ValueError("Multiple tenants are named %s" % tenant)
    elif len(matched_tenants) == 0:
        raise ValueError("Tenant named %s does not exist" % tenant)

    tenant_id = matched_tenants[0].id

    ks_user = keystone.users.create(name=user, password=password, email=email,
                                    tenant_id=tenant_id)

    return (True, ks_user.id)


def main():

    module = AnsibleModule(
        argument_spec=dict(
            user=dict(required=False),
            password=dict(required=False),
            tenant=dict(required=False),
            tenant_description=dict(required=False),
            email=dict(required=False),
            role=dict(required=False),
            state=dict(default='present', choices=['present', 'absent']),
            endpoint=dict(required=False,
                          default="http://127.0.0.1:35357/v2.0"),
            token=dict(required=False),
            login_user=dict(required=False),
            login_password=dict(required=False)
        ),
        supports_check_mode=True,
        mutually_exclusive=[['token', 'login_user'],
                            ['token', 'login_password']]
    )

    if not keystoneclient_found:
        module.fail_json(msg="the python-keystoneclient module is required")

    user = module.params['user']
    password = module.params['password']
    tenant = module.params['tenant']
    tenant_description = module.params['tenant_description']
    email = module.params['email']
    role = module.params['role']
    state = module.params['state']
    endpoint = module.params['endpoint']
    token = module.params['token']
    login_user = module.params['login_user']
    login_password = module.params['login_password']

    keystone = authenticate(endpoint, token, login_user, login_password)

    check_mode = module.check_mode

    d = dispatch(keystone, user, password, tenant, tenant_description, email,
                role, state, endpoint, token, login_user, login_password,
                check_mode)

    module.exit_json(**d)


def dispatch(keystone, user=None, password=None, tenant=None,
             tenant_description=None, email=None, role=None,
             state="present", endpoint=None, token=None, login_user=None,
             login_password=None, check_mode=False):
    """ Dispatch to the appropriate method.

        Returns a dict that will be passed to exit_json """
    changed = False
    id = None
    if tenant:
        if user:
            if state == 'present':
                change, id = ensure_user_exists(keystone, user, password,
                                                email, tenant, check_mode)
        else:
            if state == 'present':
                changed, id = ensure_tenant_exists(keystone, tenant,
                                                   tenant_description,
                                                   check_mode)
            elif state == 'absent':
                ensure_tenant_removed(keystone, tenant, check_mode)
    return dict(changed=changed, id=id)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
if __name__ == '__main__':
    main()
